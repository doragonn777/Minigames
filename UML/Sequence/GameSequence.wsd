@startuml
title "タイトル画面でスタートボタンを押した時"

-> TitleUI : Start()
activate TitleUI

TitleUI -> GameStateManager : ChangeState(GameSelect)
deactivate TitleUI
activate GameStateManager

GameStateManager -> GameStateManager : 状態を変更

GameStateManager -> GameStateManager : OnStateChanged.Invoke(GameSelect)

GameStateManager -> SceneLoader : LoadScene(GameSelect)
activate SceneLoader

SceneLoader --> GameStateManager
deactivate SceneLoader
@enduml

@startuml
title "タイトル画面で終了ボタンを押した時"

-> TitleUI : Exit()
activate TitleUI

TitleUI -> GameStateManager : ChangeState(ExitGame)
deactivate TitleUI
activate GameStateManager

GameStateManager -> GameStateManager : 状態を変更

GameStateManager -> GameStateManager : OnStateChanged.Invoke(ExitGame)

GameStateManager -> GameStateManager : ゲームを終了
@enduml

@startuml
title "ゲーム選択画面でゲームを選択した時"

-> GameUI : PlayGame()
activate GameUI

GameUI -> GameStateManager : ChangeState(game)
deactivate GameUI
activate GameStateManager

GameStateManager -> GameStateManager : 状態を変更

GameStateManager -> GameStateManager : OnStateChanged.Invoke(InGame)

GameStateManager -> SceneLoader : LoadScene(game)
activate SceneLoader

SceneLoader --> GameStateManager
deactivate SceneLoader

@enduml

@startuml
title タイトルに戻るボタンを押した時

-> GameSelectUI : BackToTitle()
activate GameSelectUI

GameSelectUI -> GameStateManager : ChangeState(Title)
deactivate GameSelectUI
activate GameStateManager

GameStateManager -> GameStateManager : 状態を変更

GameStateManager -> GameStateManager : OnStateChanged.Invoke(Title)

GameStateManager -> SceneLoader : LoadScene(Title)
activate SceneLoader

SceneLoader --> GameStateManager
deactivate SceneLoader

@enduml

@startuml

title JankenManagerの初期化

-> JankenManager : シーン読み込み時
JankenManager -> JankenSystem ** : new JankenSystem()


JankenManager -> UIManager : 各UIのOnClosedを監視

UIManager -> JankenManager : 状態変更を監視
UIManager -> PreGameUI : OnClosedを監視
UIManager -> HandSelectUI : OnClosedを監視
UIManager -> ResultUI : OnClosedを監視
UIManager -> PreGameUI : Open()





return

autoactivate on

JankenManager -> JankenManager : Init()

autoactivate off

JankenManager -> JankenManager : 状態をPregameに変更

JankenManager -> JankenManager : jankenTextの内容を変更

JankenManager -> CharacterManager : playersをリセット\n(画面上のキャラクターを削除)

JankenManager -> JankenSystem : ResetPlayer()

JankenManager -> Character ** : キャラクター作成

JankenManager -> CharacterManager : プレイヤーとNPCを登録する

note right of JankenManager : 現時点では、プレイヤーとNPCの1対1でじゃんけんする\n今後PreGameUI上で人数を変えられるようにするかも



JankenManager -> PreGameUI : Open()
@enduml

@startuml
title PreGameUIでスタートボタンを押した時
autoactivate on

-> PreGameUI : Close()

autoactivate off

PreGameUI -> UIManager : イベント通知
deactivate PreGameUI
activate UIManager

UIManager -> JankenManager : イベント通知
deactivate UIManager
activate JankenManager

JankenManager -> JankenManager : jankenTextの内容を変更

alt currentState == PreGame
JankenManager -> JankenManager : currentState\n = HandSelect

JankenManager -> CharacterManager : Characterのリストを取得
activate CharacterManager
CharacterManager --> JankenManager : characterList
deactivate CharacterManager

loop characterListの各要素に対して
JankenManager -> JankenSystem : IJankenPlayerを登録
end

else
JankenManager -> JankenManager : currentState\n = HandSelectAgain
end
autoactivate on

loop playersが持つ全Characterに対して
JankenManager -> Character : Thinking()
return
end

autoactivate off
JankenManager -> JankenManager : HandSelect状態に変更
JankenManager -> UIManager : イベント通知
activate UIManager
UIManager -> HandSelectUI : Open()
UIManager --> JankenManager
deactivate UIManager
autoactivate on



@enduml

@startuml
title HandSelectUIで出す手を選んだ時
autoactivate on

-> HandSelectUI : SelectHand(hand)

autoactivate off
HandSelectUI -> HandSelectUI : selectedHand = hand

HandSelectUI -> JankenManager : 操作キャラクターを取得
activate JankenManager
JankenManager --> HandSelectUI : mainPlayer
deactivate JankenManager

HandSelectUI -> MainCharacter : 選択した手を登録

HandSelectUI -> HandSelectUI : Close()


HandSelectUI -> UIManager : イベント通知
deactivate HandSelectUI
activate UIManager

UIManager -> JankenManager : イベント通知
deactivate UIManager
activate JankenManager

JankenManager -> JankenManager : 状態をPlayJankenに変更
JankenManager -> JankenManager : jankenTextの内容を変更
autoactivate on


JankenManager -> JankenSystem : Judge()
return result

JankenManager -> CharacterManager : じゃんけんの参加者を取得
return characterList

loop characterListの各要素に対して
autoactivate off
JankenManager -> Character : じゃんけんする演出を再生
activate Character
Character -> IJankenPlayer : 出した手を取得
activate IJankenPlayer
IJankenPlayer --> Character : playedHand
deactivate IJankenPlayer
Character -> Character : 出した手に応じた演出
Character --> JankenManager
deactivate Character
end

JankenManager -> JankenManager : キャラクターの演出\n（じゃんけんぽん）が終わるまで待つ

JankenManager -> JankenManager : 状態をJankenEndedに変更

JankenManager -> JankenManager : jankenTextの内容を変更
autoactivate on


alt あいこだった
JankenManager -> JankenManager : OnDraw()
autoactivate off
note right of JankenManager : PregameUIを閉じた時のシーケンスと同様
JankenManager -> JankenManager : OnHandSelect()
autoactivate on
return

else
JankenManager -> JankenManager : OnResult()

autoactivate off
JankenManager -> JankenManager : 状態をResultに変更
autoactivate on
JankenManager -> UIManager : イベント通知
UIManager -> ResultUI : Open()
return
return

autoactivate off
JankenManager -> JankenManager : jankenTextを勝敗に合わせ変更
autoactivate on

JankenManager -> CharacterManager
return characterList
loop characterListの各要素に対して
autoactivate off
JankenManager -> Character : 出した手を取得
activate Character
Character --> JankenManager : playedHand
deactivate Character

JankenManager -> JankenManager : 勝敗とplayedHandを比較

alt 勝ったキャラクターである
JankenManager -> Character : Happy()
else
JankenManager -> Character : Sad()
end
end
return
end


@enduml

@startuml
title リザルト画面を閉じた時

-> ResultUI : Replay()\n(Quit())
activate ResultUI

ResultUI -> JankenManager : OnReplay\n(OnQuit)
deactivate ResultUI
activate JankenManager

alt リプレイを選択
JankenManager -> JankenManager : Init()

else 退出を選択
JankenManager -> GameStateManager : ChangeState(GameSelect)
end
@enduml

@startuml
title JankenSystem.Judge()

-> JankenSystem : Judge()
activate JankenSystem

note right of JankenSystem : 各参加者が出す手を取得し、Resultに保存する
loop IJankenPlayer p in participants

JankenSystem -> IJankenPlayer : GetHand()
activate IJankenPlayer

IJankenPlayer -> JankenSystem : hand
deactivate IJankenPlayer

end

JankenSystem -> JankenSystem : 保存した情報を基に\n勝敗を判定する
<-- JankenSystem : result
@enduml

@startuml
title BaseUI.Open()

-> BaseUI : Open()
activate BaseUI

BaseUI -> BaseUI : uiState = Opening

alt Animationが設定されている
BaseUI -> BaseUI : PlayAnim(true)
activate BaseUI

BaseUI --> BaseUI : OnAnimEnded()
deactivate BaseUI

else Animationが設定されていない

BaseUI -> BaseUI : OnAnimEnded()

end

BaseUI -> BaseUI : uiState = Active

BaseUI -> ButtonUtil : EnableButtons(buttons[])
activate ButtonUtil

ButtonUtil --> BaseUI
deactivate ButtonUtil

@enduml

@startuml
title BaseUI.Close()

-> BaseUI : Close()
activate BaseUI

BaseUI -> BaseUI : uiState = Closing

BaseUI -> ButtonUtil : DisableButtons(buttons[])
activate ButtonUtil

ButtonUtil --> BaseUI
deactivate ButtonUtil

alt Animationが設定されている
BaseUI -> BaseUI : PlayAnim(false)
activate BaseUI

BaseUI --> BaseUI : OnAnimEnded()
deactivate BaseUI

else Animationが設定されていない

BaseUI -> BaseUI : OnAnimEnded()

end
BaseUI -> BaseUI : uiState = InActive

BaseUI -> BaseUI : OnClosed.Invoke()
activate BaseUI

BaseUI --> BaseUI
deactivate BaseUI
@enduml

